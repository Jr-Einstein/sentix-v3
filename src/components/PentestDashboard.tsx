import { useState, useEffect } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { 
  Shield, 
  Zap, 
  Activity, 
  Target, 
  AlertTriangle, 
  CheckCircle, 
  Clock, 
  Globe, 
  Database, 
  Search,
  Brain,
  FileText,
  Mail,
  Server,
  Monitor,
  Gauge
} from "lucide-react";

interface ScanPhase {
  id: string;
  name: string;
  status: 'completed' | 'running' | 'queued' | 'failed';
  progress: number;
  description: string;
  details?: string[];
}

interface LiveMetric {
  id: string;
  label: string;
  value: number | string;
  icon: React.ComponentType<any>;
  color: string;
  trend?: 'up' | 'down' | 'stable';
}

interface ActivityLogItem {
  id: string;
  timestamp: string;
  message: string;
  type: 'info' | 'success' | 'warning' | 'error';
  icon: React.ComponentType<any>;
}

export const PentestDashboard = ({ 
  scanTarget, 
  isActive = false 
}: { 
  scanTarget?: string; 
  isActive?: boolean; 
}) => {
  const [scanPhases, setScanPhases] = useState<ScanPhase[]>([
    {
      id: 'recon',
      name: 'RECONNAISSANCE PHASE',
      status: 'completed',
      progress: 100,
      description: 'Network discovery and enumeration',
      details: ['Port Scan Complete (23 open ports)', 'Service Detection Complete', 'OS Fingerprinting Complete']
    },
    {
      id: 'vuln',
      name: 'VULNERABILITY ANALYSIS',
      status: 'running',
      progress: 67,
      description: 'Automated vulnerability scanning',
      details: ['SQL Injection Test (Running...)', 'XSS Detection (Queued)', 'Authentication Bypass (Queued)']
    },
    {
      id: 'ai',
      name: 'AI ANALYSIS PHASE',
      status: 'running',
      progress: 45,
      description: 'Intelligent threat assessment',
      details: ['Gemini Processing Security Data', 'Risk Assessment: High Risk: 74%', 'Generating Remediation Strategies']
    },
    {
      id: 'report',
      name: 'REPORTING PHASE',
      status: 'queued',
      progress: 0,
      description: 'Report generation and delivery',
      details: ['HTML Report Generation', 'Executive Summary Creation', 'Email Delivery']
    }
  ]);

  const [liveMetrics, setLiveMetrics] = useState<LiveMetric[]>([
    { id: 'ports', label: 'Open Ports', value: 23, icon: Server, color: 'text-cyber-blue', trend: 'up' },
    { id: 'vulns', label: 'Vulnerabilities', value: 3, icon: AlertTriangle, color: 'text-destructive', trend: 'stable' },
    { id: 'services', label: 'Services', value: 15, icon: Database, color: 'text-terminal-green', trend: 'up' },
    { id: 'confidence', label: 'AI Confidence', value: '87%', icon: Brain, color: 'text-n8n-purple', trend: 'up' },
    { id: 'shodan', label: 'Shodan Hits', value: 12, icon: Globe, color: 'text-n8n-orange', trend: 'stable' },
    { id: 'remediation', label: 'Remediation', value: 8, icon: Shield, color: 'text-accent', trend: 'up' }
  ]);

  const [activityLog, setActivityLog] = useState<ActivityLogItem[]>([
    { id: '1', timestamp: '14:32:15', message: 'Port scan completed - 23 open ports found', type: 'success', icon: CheckCircle },
    { id: '2', timestamp: '14:31:45', message: 'Started service version detection', type: 'info', icon: Search },
    { id: '3', timestamp: '14:31:20', message: 'Nmap scan initiated on 192.168.1.100', type: 'info', icon: Target },
    { id: '4', timestamp: '14:31:00', message: 'Workflow triggered via webhook', type: 'info', icon: Activity }
  ]);

  const [overallProgress, setOverallProgress] = useState(53);
  const [riskScore, setRiskScore] = useState(74);
  const [threatLevel, setThreatLevel] = useState<'Low' | 'Medium' | 'High' | 'Critical'>('High');

  // Simulate real-time updates
  useEffect(() => {
    if (!isActive) return;

    const interval = setInterval(() => {
      // Update progress
      setOverallProgress(prev => Math.min(prev + Math.random() * 2, 100));
      
      // Simulate phase progression
      setScanPhases(prev => prev.map(phase => {
        if (phase.status === 'running' && phase.progress < 100) {
          return { ...phase, progress: Math.min(phase.progress + Math.random() * 5, 100) };
        }
        return phase;
      }));

      // Add new activity log entries occasionally
      if (Math.random() > 0.8) {
        const newActivity: ActivityLogItem = {
          id: Date.now().toString(),
          timestamp: new Date().toLocaleTimeString('en-US', { hour12: false }),
          message: 'AI analysis processing vulnerability signatures...',
          type: 'info',
          icon: Brain
        };
        setActivityLog(prev => [newActivity, ...prev.slice(0, 9)]);
      }
    }, 2000);

    return () => clearInterval(interval);
  }, [isActive]);

  const getStatusIcon = (status: ScanPhase['status']) => {
    switch (status) {
      case 'completed': return <CheckCircle className="h-5 w-5 text-terminal-green" />;
      case 'running': return <Activity className="h-5 w-5 text-n8n-orange animate-pulse" />;
      case 'queued': return <Clock className="h-5 w-5 text-muted-foreground" />;
      case 'failed': return <AlertTriangle className="h-5 w-5 text-destructive" />;
    }
  };

  const getThreatLevelColor = (level: string) => {
    switch (level) {
      case 'Low': return 'text-terminal-green';
      case 'Medium': return 'text-n8n-orange';
      case 'High': return 'text-destructive';
      case 'Critical': return 'text-red-500';
      default: return 'text-muted-foreground';
    }
  };

  if (!isActive) {
    return null;
  }

  return (
    <div className="min-h-screen bg-background p-6">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Shield className="h-8 w-8 text-primary" />
            <div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-primary via-n8n-purple to-cyber-blue bg-clip-text text-transparent">
                AI Pentest Dashboard
              </h1>
              <p className="text-muted-foreground">Target: {scanTarget}</p>
            </div>
          </div>
          <div className="flex items-center space-x-4">
            <Badge variant="outline" className="bg-card/50">
              <Activity className="h-3 w-3 mr-1 animate-pulse" />
              Live Scan
            </Badge>
            <Button variant="outline" size="sm">
              <FileText className="h-4 w-4 mr-2" />
              Export Report
            </Button>
          </div>
        </div>

        {/* Executive Overview */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          <Card className="p-6 bg-gradient-to-br from-card to-card/80 border-border/50">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Overall Progress</p>
                <p className="text-2xl font-bold">{overallProgress.toFixed(0)}%</p>
              </div>
              <Gauge className="h-8 w-8 text-primary" />
            </div>
            <Progress value={overallProgress} className="mt-3" />
          </Card>

          <Card className="p-6 bg-gradient-to-br from-card to-card/80 border-border/50">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Risk Score</p>
                <p className={`text-2xl font-bold ${getThreatLevelColor(threatLevel)}`}>{riskScore}%</p>
              </div>
              <AlertTriangle className={`h-8 w-8 ${getThreatLevelColor(threatLevel)}`} />
            </div>
            <div className="mt-3">
              <Badge variant="secondary" className={getThreatLevelColor(threatLevel)}>
                {threatLevel} Risk
              </Badge>
            </div>
          </Card>

          <Card className="p-6 bg-gradient-to-br from-card to-card/80 border-border/50">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">ETA Remaining</p>
                <p className="text-2xl font-bold">24m</p>
              </div>
              <Clock className="h-8 w-8 text-n8n-orange" />
            </div>
            <p className="text-sm text-muted-foreground mt-3">Estimated completion</p>
          </Card>

          <Card className="p-6 bg-gradient-to-br from-card to-card/80 border-border/50">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Last Update</p>
                <p className="text-2xl font-bold">14:32</p>
              </div>
              <Activity className="h-8 w-8 text-terminal-green animate-pulse" />
            </div>
            <p className="text-sm text-muted-foreground mt-3">Real-time sync</p>
          </Card>
        </div>

        {/* Live Metrics Grid */}
        <Card className="p-6 bg-gradient-to-br from-card to-card/80 border-border/50">
          <h3 className="text-lg font-semibold mb-4">Live Metrics</h3>
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
            {liveMetrics.map((metric) => (
              <div key={metric.id} className="text-center p-4 rounded-lg bg-muted/30 border border-border/50">
                <div className="flex items-center justify-center mb-2">
                  <metric.icon className={`h-6 w-6 ${metric.color}`} />
                </div>
                <p className="text-2xl font-bold">{metric.value}</p>
                <p className="text-sm text-muted-foreground">{metric.label}</p>
              </div>
            ))}
          </div>
        </Card>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Progress Tracker */}
          <Card className="p-6 bg-gradient-to-br from-card to-card/80 border-border/50">
            <h3 className="text-lg font-semibold mb-4 flex items-center">
              <Zap className="h-5 w-5 mr-2 text-primary" />
              Scan Progress
            </h3>
            <div className="space-y-4">
              {scanPhases.map((phase) => (
                <div key={phase.id} className="border border-border/50 rounded-lg p-4 bg-muted/20">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center space-x-2">
                      {getStatusIcon(phase.status)}
                      <h4 className="font-medium">{phase.name}</h4>
                    </div>
                    <span className="text-sm text-muted-foreground">{phase.progress}%</span>
                  </div>
                  <p className="text-sm text-muted-foreground mb-2">{phase.description}</p>
                  <Progress value={phase.progress} className="mb-2" />
                  {phase.details && (
                    <div className="space-y-1">
                      {phase.details.map((detail, index) => (
                        <p key={index} className="text-xs text-muted-foreground">• {detail}</p>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </div>
          </Card>

          {/* Activity Feed */}
          <Card className="p-6 bg-gradient-to-br from-card to-card/80 border-border/50">
            <h3 className="text-lg font-semibold mb-4 flex items-center">
              <Monitor className="h-5 w-5 mr-2 text-primary" />
              Activity Feed
            </h3>
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {activityLog.map((item) => (
                <div key={item.id} className="flex items-start space-x-3 p-3 rounded-lg bg-muted/20 border border-border/30">
                  <item.icon className={`h-4 w-4 mt-0.5 ${
                    item.type === 'success' ? 'text-terminal-green' :
                    item.type === 'warning' ? 'text-n8n-orange' :
                    item.type === 'error' ? 'text-destructive' :
                    'text-muted-foreground'
                  }`} />
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center justify-between">
                      <p className="text-sm font-medium">{item.message}</p>
                      <span className="text-xs text-muted-foreground">{item.timestamp}</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </Card>
        </div>

        {/* System Health Monitor */}
        <Card className="p-6 bg-gradient-to-br from-card to-card/80 border-border/50">
          <h3 className="text-lg font-semibold mb-4 flex items-center">
            <Activity className="h-5 w-5 mr-2 text-primary" />
            System Health
          </h3>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="flex items-center space-x-3">
              <div className="w-3 h-3 bg-terminal-green rounded-full animate-pulse"></div>
              <span className="text-sm">n8n Workflows</span>
            </div>
            <div className="flex items-center space-x-3">
              <div className="w-3 h-3 bg-terminal-green rounded-full animate-pulse"></div>
              <span className="text-sm">Docker Containers</span>
            </div>
            <div className="flex items-center space-x-3">
              <div className="w-3 h-3 bg-n8n-orange rounded-full animate-pulse"></div>
              <span className="text-sm">API Rate Limits</span>
            </div>
            <div className="flex items-center space-x-3">
              <div className="w-3 h-3 bg-terminal-green rounded-full animate-pulse"></div>
              <span className="text-sm">Database</span>
            </div>
          </div>
        </Card>
      </div>
    </div>
  );
};